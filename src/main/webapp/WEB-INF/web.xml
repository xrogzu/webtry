<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
	
  	<display-name>webtry007</display-name>
  	<description>网站描述</description>
	<icon>
		<small-icon>/images/small.gif</small-icon>
		<large-icon>/images/large.gif</large-icon>
	</icon>
	
  <welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>

	<servlet>
		<servlet-name>hessianService</servlet-name>
		<servlet-class>com.caucho.hessian.server.HessianServlet</servlet-class>
		<init-param>
			<param-name>service-class</param-name>
			<param-value>hessian.server.HelloImpl</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>hessianService</servlet-name>
		<url-pattern>/hessianService</url-pattern>
	</servlet-mapping>


	<servlet>
		<servlet-name>RestServlet</servlet-name>
		<servlet-class>net.sf.serfj.RestServlet</servlet-class>
		<load-on-startup>5</load-on-startup>
	</servlet>
	

	<servlet-mapping>
		<servlet-name>RestServlet</servlet-name>
		<url-pattern>/banks/*</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>RestServlet</servlet-name>
		<url-pattern>/accounts/*</url-pattern>
	</servlet-mapping>
	
	
	<!--  ***********************  freemarker spring start  **************************** -->
 	<!--  Spring 服务层的配置文件 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:/spring/*-applicationContext.xml</param-value>
    </context-param>
     
    <!--  Spring 容器启动监听器 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
 
    <servlet>
		<servlet-name>springmvc-freemarker</servlet-name>
			<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
			<!-- DispatcherServlet 默认加载的bean文件是/WEB-INF/(servlet-name)-servlet.xml 可以通过配置contextConfigLocation来改变加载的文件 -->
			<init-param>
				<param-name>contextConfigLocation</param-name>
				<!-- <param-value>/WEB-INF/classes/applicationContext.xml</param-value>
				<param-value>classpath:/spring/springmvc-servlet.xml</param-value> -->
				<param-value>classpath:/spring/freemarker-springmvc-servlet.xml</param-value>
			</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
    <!--为DispatcherServlet建立映射 -->
    <servlet-mapping>
        <servlet-name>springmvc-freemarker</servlet-name>
        <url-pattern>/freemarker/*</url-pattern>
    </servlet-mapping>
    <!--  ***********************  freemarker spring  end  **************************** -->
    
    
    
    <!--  ***********************  springmvc test   start  **************************** -->
    <servlet>
        <servlet-name>springmvc-dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 初始化参数   不知道为什么，如果加上下面的初始化参数，运行时就会报404错：dispatcherservlet is not available -->
			<init-param>
				<param-name>contextConfigLocation</param-name>
				<!-- <param-value>classpath:/spring/springmvc*-dispatcher-servlet.xml</param-value> -->
				<param-value>classpath:/spring/springmvc-annotation-dispatcher-servlet.xml</param-value>
			</init-param>
			<load-on-startup>21</load-on-startup>
    </servlet>
    
    <!-- 拦截所有以do结尾的请求 *.后缀  or /spring/* 的无后缀形式都可以 -->
    <servlet-mapping>
        <servlet-name>springmvc-dispatcherServlet</servlet-name>
        <url-pattern>/spring/*</url-pattern>
    </servlet-mapping>
 	<!--  ***********************  springmvc test   end  **************************** -->
 	
 	<!--  ***********************  UrlRewriteFilter test   start  **************************** -->
	<!--  	http://127.0.0.1:8080/webtry/rewrite-status -->
	<!-- http://127.0.0.1:8080/webtry/test/status/ -->
	<!-- 
 	<filter>
        <filter-name>UrlRewriteFilter</filter-name>
        <filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>UrlRewriteFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
    </filter-mapping> -->
    
    <!--  ***********************  UrlRewriteFilter test   end  **************************** -->
    
    <!--  ***********************  sitemesh test   start  **************************** -->
 <!--    <filter>  
        <filter-name>sitemesh</filter-name>  
        <filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>  
        <filter-class>org.sitemesh.webapp.SiteMeshFilter</filter-class>  
    </filter>  
      
    <filter-mapping>  
        <filter-name>sitemesh</filter-name>  
        <url-pattern>/*</url-pattern>  
    </filter-mapping>   -->
    
  <!--  <jsp-config> -->
	   <!-- <taglib>
	      <taglib-uri>sitemesh-decorator</taglib-uri>
	      <taglib-location>
	         /WEB-INF/sitemesh-decorator.tld
	      </taglib-location>
	   </taglib>
	   <taglib>
		   <taglib-uri>sitemesh-page</taglib-uri>
		   <taglib-location>
		      /WEB-INF/sitemesh-page.tld</taglib-location>
	   </taglib> -->
	   
	  <!--  <taglib>
	        <taglib-uri>http://www.opensymphony.com/sitemesh/decorator</taglib-uri>
	        <taglib-location>/WEB-INF/sitemesh-decorator.tld</taglib-location>
	    </taglib>
	
	    <taglib>
	        <taglib-uri>http://www.opensymphony.com/sitemesh/page</taglib-uri>
	        <taglib-location>/WEB-INF/sitemesh-page.tld</taglib-location>
	    </taglib>
	   
	</jsp-config> -->
    
    <!--  ***********************  sitemesh test   end  **************************** -->
	
	 <!-- session-config包含一个子元素session-timeout.定义web站台中的session参数.  -->  
   <session-config>  
      <!-- 定义这个web站台所有session的有效期限.单位为分钟. 例子中为600分钟 -->  
      <session-timeout>600</session-timeout>  
   </session-config>  
   
   
	<!-- error-page元素包含三个子元素error-code,exception-type和location.将错误代码(Error Code)或异常(Exception)的种类对应到web站台资源路径.-->  
    <!-- <error-page>  
        HTTP Error code  
        <error-code>403</error-code>  
        在web站点内的相关资源路径   
        <location>/403.jsp</location>  
    </error-page>  
    <error-page>  
        <error-code>404</error-code>  
        <location>/404.jsp</location>  
    </error-page>  
    <error-page>  
        <error-code>500</error-code>  
        <location>/500.jsp</location>  
    </error-page>  
    <error-page>  
        一个完整名称的Java异常类型   
        <exception-type>java.lang.Exception</exception-type>  
         <location>/exception.jsp</location>  
    </error-page>    -->
    
      <!-- esource-ref元素包括五个子元素description,res-ref-name,res-type,res-auth,res-sharing-scope.利用JNDI取得站台可  -->  
    <resource-ref>  
        <!-- 资源说明  -->  
        <description>JNDI JDBC DataSource of JSPBook</description>  
        <!-- 资源名称  -->  
        <res-ref-name>jdbc/sample_db</res-ref-name>  
        <!-- 资源种类  -->  
        <res-type>javax.sql.DataSoruce</res-type>  
        <!-- 资源由Application或Container来许可,如下面为Container  -->  
        <res-auth>Container</res-auth>  
        <!-- 资源是否可以共享.默认值为 Shareable 可选择Shareable|Unshareable -->  
        <res-sharing-scope>Unshareable</res-sharing-scope>   
    </resource-ref>   
</web-app>
